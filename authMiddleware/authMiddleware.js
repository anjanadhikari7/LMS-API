// get the user form the access token
// 1. Checking if the token is valid or not
// 2. Whether the token was generated by our API or not
// 3. Once validated, it will get user email from that token
// 4. Get user from our db using that email

import { getSession } from "../model/sessionModel.js";
import { findUserByEmail } from "../model/userModel.js";
import {
  generateAccessJWT,
  verifyAccessJWT,
  verifyRefreshJWT,
} from "../utility/jwtHelper.js";
import {
  buildErrorResponse,
  buildSuccessResponse,
} from "../utility/responseHelper.js";

const getUserFromAccessJWT = async (accessJWT) => {
  // Check if the token exists in session storage

  const token = await getSession(accessJWT);

  if (!token?._id) {
    return false;
  }

  // validate accessJWT

  const decodedToken = verifyAccessJWT(accessJWT);

  if (!decodedToken?.email) {
    return false;
  }
  // token is valid
  //get user based on the decoded email
  const user = await findUserByEmail(decodedToken.email);
  return user;
};
export const userAuth = async (req, res, next) => {
  try {
    const { authorization } = req.headers;

    // find user based on auth token

    const user = await getUserFromAccessJWT(authorization);
    if (user?._id) {
      user.password = undefined;
      req.userInfo = user;
      next();
      return;
    }

    buildErrorResponse(res, "Invalid token, unauthorized");
  } catch (error) {
    buildErrorResponse(res, "Invalid token, unauthorized");
  }
};
export const refreshAuth = async (req, res, next) => {
  try {
    const { authorization } = req.headers;
    // Validate and decode refresh token
    const decodedToken = verifyRefreshJWT(authorization);
    if (decodedToken?.email) {
      const user = await findUserByEmail(decodedToken.email);

      if (user?._id) {
        const accessJWT = generateAccessJWT(user.email);

        buildSuccessResponse(res, accessJWT, "New accessJWT");
        return;
      }
    }
  } catch (error) {
    buildErrorResponse(res, "Invalid token, unauthorized");
  }
};

export const adminAuth = async (req, res, next) => {
  // Call userAuth and handle the result
  userAuth(req, res, async (err) => {
    if (err) {
      return buildErrorResponse(res, "Invalid token, unauthorized");
    }

    const user = req.userInfo; // This should be populated by the userAuth middleware

    if (user?.role !== "admin") {
      return buildErrorResponse(res, "Not Authorized to create a book");
    }

    next();
  });
};
